#!/usr/bin/env lua

--------------------------------------------------------------------------------
-- sailor v0.5: Command line utility for sailor
-- This file is a part of Sailor project
-- Copyright (c) 2014 Etiene Dalcol <dalcol@etiene.net>
-- License: MIT
-- http://sailorproject.org
--------------------------------------------------------------------------------

local lfs = require "lfs"
--local inspect = require "inspect"
local argparse = require "argparse"
local colors = require "ansicolors"


local function get_sailor_path(current_dir)
	local sailor_path = ((debug.getinfo(1).source):match("^@?(.-)/sailor$"))

	local f = sailor_path and io.open(sailor_path.."/src/sailor.lua", "r")
	if not f then
		local datafile = require("datafile")
		sailor_path = datafile.path("sailor/cookie.lua"):match("^@?(.-)/sailor/cookie.lua$")
	else
		f:close()
		if sailor_path == '.' then
			sailor_path = current_dir.."/src"
		elseif sailor_path:match("^.") then
			local path = sailor_path:match(".(.-)")
			sailor_path = current_dir.."/sailor"..tostring(path).."/src"
		elseif not sailor_path:match("^/") then
			sailor_path = current_dir.."/src/"..sailor_path
		else
			sailor_path = sailor_path.."/src"
		end
	end
	return sailor_path
end

local function create(args, _)
	local name = string.gsub(args.name:lower(),' ','_')
	local current_dir = lfs.currentdir()
	local destiny = arg[3] or current_dir

	local sailor_path = get_sailor_path(current_dir)

	local raw_app = sailor_path.."/sailor/blank-app"
	local new_app = destiny.."/"..name
	assert(os.execute("cp -a '"..raw_app.."' '"..new_app.."'"))

	local htaccess = assert(io.open (new_app.."/.htaccess" , "r"))
	local src = htaccess:read("*a")
	htaccess:close()

	htaccess = assert(io.open (new_app.."/.htaccess" , "w"))
	src = string.gsub(src,"{{path}}",sailor_path)
	htaccess:write(src)
	htaccess:close()

	local conf = assert(io.open (new_app.."/conf/conf.lua" , "r"))
	src = conf:read("*a")
	conf:close()
	conf = assert(io.open (new_app.."/conf/conf.lua" , "w"))
	src = string.gsub(src,"Sailor! A Lua MVC Framework",arg[2])
	conf:write(src)
	conf:close()

	print("done!")
end

local function test(args, _)
	local flags = ''
	for i=2,#arg do
		if not args.resty then
			flags = flags..arg[i]..' '
		end
	end
	local ok, code
	if args.resty then
		ok, code = os.execute('resty tests/bootstrap_resty.lua')
	else
		ok, code = os.execute('busted --helper=tests/bootstrap.lua '..flags..'tests/unit/* tests/functional/*')
	end

	if type(ok) == "number" then return ok end -- Lua 5.1 just returns the status code
	exit_code = ok and 0 or 1 -- don't care about actual value

    if exit_code and exit_code ~= 0 then
    	-- exit code sometimes is > 255 and fails to be propagated
    	os.exit(1, true)
    end
end

local function enable(args, _)
	local name = 'sailor-'..arg[2]
	local current_dir = lfs.currentdir()
	local sailor_path = get_sailor_path(current_dir)

	assert(os.execute('luarocks install '..name))

	local ext_app = sailor_path.."/sailor/"..arg[2].."/app"
	assert(os.execute("mkdir -p extensions"))
	local err = assert(os.execute("cp -a '"..ext_app.."' extensions/"..arg[2]))
	if err == 0 then
		local index_file = assert(io.open ("index.lua" , "r"))
		local src = index_file:read("*a")
		index_file:close()

		local package_path = "package.path =  base_dir..'extensions/"..arg[2].."/?.lua;'..package.path"
		src = string.gsub(src,"\nlocal sailor",package_path.."\n\nlocal sailor")
		index_file = assert(io.open ("index.lua" , "w"))
		index_file:write(src)
		index_file:close()
		print("New files:")
		print("extensions/"..arg[2].."/*\n")
		print("Files modified:")
		print("index.lua\n")
		print("done!")
	end
end


local parser = argparse("script", colors("%{blink yellow}Sailor commands"))
    :name(string.match(arg[0], "/*(%w+)/*$"))
    :require_command(true)
local create_cmd = parser:command("c create", "Generates web application in a directory."):action(create)
    create_cmd:argument("name", "The name of your application.")
    create_cmd:argument("path", "The path to where you wish your app to be created.")
    :default(".")
local test_cmd = parser:command("t test", "Will run the tests specified for an application. Must be called from the base dir of the application.")
    :action(test)
    -- Optional. Flags for the Busted library.")
    test_cmd:flag("--resty", "Use", false)
local enable_cmd = parser:command("e enable", "Will install an extension to Sailor and copy necessary files to your app. Must be called from the base dir of the application.")
    :action(enable)
    enable_cmd:argument("name", "The name of the extension to be enabled.")

local args = parser:parse()
--print(inspect(args))
